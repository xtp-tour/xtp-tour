services:
  # MySQL Database
  mysql:
    image: mysql:9.3.0
    ports:
      - "33306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: xtp_tour
    volumes:
      - .data/db:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - xtp-tour

  # Adminer for database management
  adminer:
    image: adminer
    ports:
      - "38080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      - mysql
    networks:
      - xtp-tour

  # Backend API service
  backend:
    build:
      context: ./api
      dockerfile: Dockerfile.multi
    ports:
      - "8080:8080"
      - "8081:8081"  # metrics port
    environment:
      - AUTH_TYPE=debug
      - LOG_LEVEL=info
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=xtp_tour
      - SERVICE_PORT=8080
      - METRICS_PORT=8081
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - xtp-tour
    # Run migrations before starting the service
    command: ["sh", "-c", "/usr/bin/api migrate && /usr/bin/api"]

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost:8080
        - VITE_CLERK_PUBLISHABLE_KEY=${VITE_CLERK_PUBLISHABLE_KEY:-debug}
        - VITE_APP_VERSION=${VITE_APP_VERSION:-dev}
    ports:
      - "3000:8080"
    depends_on:
      - backend
    networks:
      - xtp-tour

  # Integration tests - runs after backend is healthy
  integration-tests:
    build:
      context: ./api
      dockerfile: Int.Dockerfile.multi
    environment:
      - SERVICE_HOST=http://backend:8080
      - METRICS_HOST=http://backend:8081
      - PROJECT_NAME=api
    depends_on:
      backend:
        condition: service_started
      mysql:
        condition: service_healthy
    networks:
      - xtp-tour

networks:
  xtp-tour:
    driver: bridge

volumes:
  db_data:
    driver: local
