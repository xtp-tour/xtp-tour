# Multi-stage build for combined frontend + backend with Caddy
FROM node:20-alpine AS frontend-builder

# Install pnpm globally
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy frontend package files
COPY frontend/package.json frontend/pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy frontend source code
COPY frontend/ .

# Build the frontend application
RUN pnpm run build

# Show the contents of the dist directory for debugging
RUN echo "Frontend build output:" && \
    ls -la dist/ && \
    echo "Frontend dist/assets:" && \
    ls -la dist/assets/ && \
    echo "Frontend dist/index.html:" && \
    cat dist/index.html

# Go backend builder stage
FROM golang:1.23.2-alpine AS backend-builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod and sum files
COPY api/go.mod api/go.sum ./

# Download dependencies
RUN go mod download

# Copy backend source code
COPY api/ .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main cmd/server/main.go

# Final runtime stage with Caddy
FROM caddy:2.7-alpine

# Install additional runtime dependencies
RUN apk add --no-cache ca-certificates tzdata wget supervisor

# Create non-root user for Go app
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy the backend binary from builder stage
COPY --from=backend-builder /app/main .

# Copy migration files from backend builder
COPY --from=backend-builder /app/pkg/db/sql/migrations ./pkg/db/sql/migrations

# Create directory for frontend files
RUN mkdir -p /usr/share/caddy

# Copy frontend build files from frontend builder to Caddy's default location
COPY --from=frontend-builder /app/dist/ /usr/share/caddy/

# Show the contents of the Caddy directory for debugging
RUN echo "Caddy static files:" && \
    ls -la /usr/share/caddy/ && \
    echo "Caddy assets:" && \
    ls -la /usr/share/caddy/assets/ && \
    echo "Caddy index.html:" && \
    cat /usr/share/caddy/index.html

# Create Caddy configuration for API proxy and frontend serving
COPY <<'EOF' /etc/caddy/Caddyfile
{
    debug
}

:8080 {
    # API routes - proxy to Go backend
    handle /api/* {
        reverse_proxy localhost:8081 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
        }
    }
    
    # Serve static frontend files and handle SPA routing
    handle {
        root * /usr/share/caddy
        
        # Enable file serving first
        file_server
        
        # For paths that don't exist, serve index.html
        handle_errors {
            rewrite * /index.html
            file_server
        }
        
        # Enable compression
        encode gzip
    }
    
    # Security headers
    header {
        X-Content-Type-Options nosniff
        X-Frame-Options DENY
        X-XSS-Protection "1; mode=block"
        Referrer-Policy strict-origin-when-cross-origin
    }
    
    # Cache static assets
    @static {
        path *.js *.css *.png *.jpg *.jpeg *.gif *.ico *.svg *.woff *.woff2 *.ttf *.eot
    }
    header @static Cache-Control "public, max-age=31536000, immutable"
    
    # No cache for HTML files
    @html {
        path *.html
    }
    header @html Cache-Control "no-cache, no-store, must-revalidate"
    
    # Logging
    log {
        output stdout
        format console
        level DEBUG
    }
}
EOF

# Create supervisor configuration to run both Caddy and Go backend
COPY <<'EOF' /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/dev/stdout
logfile_maxbytes=0
pidfile=/var/run/supervisord.pid

[program:backend]
command=/app/start-backend.sh
autostart=true
autorestart=true
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
user=appuser
environment=HOME="/app",USER="appuser",SERVICE_PORT="8081"

[program:caddy]
command=caddy run --config /etc/caddy/Caddyfile --adapter caddyfile
autostart=true
autorestart=true
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
user=root
environment=HOME="/",USER="root"
EOF

# Create backend startup script
COPY <<'EOF' /app/start-backend.sh
#!/bin/sh
set -e

echo "Starting Go Backend..."
echo "Running database migrations..."

# Run migrations first
./main migrate up

if [ $? -ne 0 ]; then
    echo "Migrations failed"
    exit 1
fi

echo "Migrations completed successfully"

# Set the port explicitly and show it
export SERVICE_PORT=8081
echo "SERVICE_PORT environment variable set to: $SERVICE_PORT"
echo "Starting Go server on port $SERVICE_PORT (API only)..."

# Start the Go backend server (API only, frontend served by Caddy)
# Pass the port as an environment variable
SERVICE_PORT=8081 exec ./main
EOF

RUN chmod +x /app/start-backend.sh

# Change ownership of app directory to appuser
RUN chown -R appuser:appgroup /app

# Environment variables with defaults
ENV DB_HOST=db
ENV DB_PORT=3306
ENV DB_USER=root
ENV DB_PASSWORD=password
ENV DB_NAME=xtp_tour
ENV SERVICE_PORT=8081
ENV LOG_LEVEL=info
ENV AUTH_TYPE=debug
ENV AUTH_CONFIG=""

# Expose port 8080 for both API (via /api) and frontend
EXPOSE 8080

# Health check via API endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8081/api/ping || exit 1

# Start supervisor to manage both services
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 