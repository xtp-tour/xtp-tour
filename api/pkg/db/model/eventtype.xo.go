package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// EventType is the 'event_type' enum type from schema 'xtp_tour'.
type EventType uint16

// EventType values.
const (
	// EventTypeMatch is the 'MATCH' event_type.
	EventTypeMatch EventType = 1
	// EventTypeTraining is the 'TRAINING' event_type.
	EventTypeTraining EventType = 2
)

// String satisfies the [fmt.Stringer] interface.
func (et EventType) String() string {
	switch et {
	case EventTypeMatch:
		return "MATCH"
	case EventTypeTraining:
		return "TRAINING"
	}
	return fmt.Sprintf("EventType(%d)", et)
}

// MarshalText marshals [EventType] into text.
func (et EventType) MarshalText() ([]byte, error) {
	return []byte(et.String()), nil
}

// UnmarshalText unmarshals [EventType] from text.
func (et *EventType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MATCH":
		*et = EventTypeMatch
	case "TRAINING":
		*et = EventTypeTraining
	default:
		return ErrInvalidEventType(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (et EventType) Value() (driver.Value, error) {
	return et.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (et *EventType) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return et.UnmarshalText(x)
	case string:
		return et.UnmarshalText([]byte(x))
	}
	return ErrInvalidEventType(fmt.Sprintf("%T", v))
}

// NullEventType represents a null 'event_type' enum for schema 'xtp_tour'.
type NullEventType struct {
	EventType EventType
	// Valid is true if [EventType] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (net NullEventType) Value() (driver.Value, error) {
	if !net.Valid {
		return nil, nil
	}
	return net.EventType.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (net *NullEventType) Scan(v interface{}) error {
	if v == nil {
		net.EventType, net.Valid = 0, false
		return nil
	}
	err := net.EventType.Scan(v)
	net.Valid = err == nil
	return err
}

// ErrInvalidEventType is the invalid [EventType] error.
type ErrInvalidEventType string

// Error satisfies the error interface.
func (err ErrInvalidEventType) Error() string {
	return fmt.Sprintf("invalid EventType(%s)", string(err))
}
