package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// JoinRequestLocation represents a row from 'xtp_tour.join_request_locations'.
type JoinRequestLocation struct {
	JoinRequestID string `json:"join_request_id"` // join_request_id
	LocationID    string `json:"location_id"`     // location_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [JoinRequestLocation] exists in the database.
func (jrl *JoinRequestLocation) Exists() bool {
	return jrl._exists
}

// Deleted returns true when the [JoinRequestLocation] has been marked for deletion
// from the database.
func (jrl *JoinRequestLocation) Deleted() bool {
	return jrl._deleted
}

// Insert inserts the [JoinRequestLocation] to the database.
func (jrl *JoinRequestLocation) Insert(ctx context.Context, db DB) error {
	switch {
	case jrl._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case jrl._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO xtp_tour.join_request_locations (` +
		`join_request_id, location_id` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, jrl.JoinRequestID, jrl.LocationID)
	if _, err := db.ExecContext(ctx, sqlstr, jrl.JoinRequestID, jrl.LocationID); err != nil {
		return logerror(err)
	}
	// set exists
	jrl._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [JoinRequestLocation] from the database.
func (jrl *JoinRequestLocation) Delete(ctx context.Context, db DB) error {
	switch {
	case !jrl._exists: // doesn't exist
		return nil
	case jrl._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM xtp_tour.join_request_locations ` +
		`WHERE join_request_id = ? AND location_id = ?`
	// run
	logf(sqlstr, jrl.JoinRequestID, jrl.LocationID)
	if _, err := db.ExecContext(ctx, sqlstr, jrl.JoinRequestID, jrl.LocationID); err != nil {
		return logerror(err)
	}
	// set deleted
	jrl._deleted = true
	return nil
}

// JoinRequestLocationByJoinRequestIDLocationID retrieves a row from 'xtp_tour.join_request_locations' as a [JoinRequestLocation].
//
// Generated from index 'join_request_locations_join_request_id_location_id_pkey'.
func JoinRequestLocationByJoinRequestIDLocationID(ctx context.Context, db DB, joinRequestID, locationID string) (*JoinRequestLocation, error) {
	// query
	const sqlstr = `SELECT ` +
		`join_request_id, location_id ` +
		`FROM xtp_tour.join_request_locations ` +
		`WHERE join_request_id = ? AND location_id = ?`
	// run
	logf(sqlstr, joinRequestID, locationID)
	jrl := JoinRequestLocation{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, joinRequestID, locationID).Scan(&jrl.JoinRequestID, &jrl.LocationID); err != nil {
		return nil, logerror(err)
	}
	return &jrl, nil
}

// JoinRequestLocationsByLocationID retrieves a row from 'xtp_tour.join_request_locations' as a [JoinRequestLocation].
//
// Generated from index 'location_id'.
func JoinRequestLocationsByLocationID(ctx context.Context, db DB, locationID string) ([]*JoinRequestLocation, error) {
	// query
	const sqlstr = `SELECT ` +
		`join_request_id, location_id ` +
		`FROM xtp_tour.join_request_locations ` +
		`WHERE location_id = ?`
	// run
	logf(sqlstr, locationID)
	rows, err := db.QueryContext(ctx, sqlstr, locationID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*JoinRequestLocation
	for rows.Next() {
		jrl := JoinRequestLocation{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&jrl.JoinRequestID, &jrl.LocationID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &jrl)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// JoinRequest returns the JoinRequest associated with the [JoinRequestLocation]'s (JoinRequestID).
//
// Generated from foreign key 'join_request_locations_ibfk_1'.
func (jrl *JoinRequestLocation) JoinRequest(ctx context.Context, db DB) (*JoinRequest, error) {
	return JoinRequestByID(ctx, db, jrl.JoinRequestID)
}

// Facility returns the Facility associated with the [JoinRequestLocation]'s (LocationID).
//
// Generated from foreign key 'join_request_locations_ibfk_2'.
func (jrl *JoinRequestLocation) Facility(ctx context.Context, db DB) (*Facility, error) {
	return FacilityByID(ctx, db, jrl.LocationID)
}
