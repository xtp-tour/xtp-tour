package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// Status is the 'status' enum type from schema 'xtp_tour'.
type Status uint16

// Status values.
const (
	// StatusOpen is the 'OPEN' status.
	StatusOpen Status = 1
	// StatusAccepted is the 'ACCEPTED' status.
	StatusAccepted Status = 2
	// StatusConfirmed is the 'CONFIRMED' status.
	StatusConfirmed Status = 3
	// StatusCancelled is the 'CANCELLED' status.
	StatusCancelled Status = 4
	// StatusReservationFailed is the 'RESERVATION_FAILED' status.
	StatusReservationFailed Status = 5
	// StatusCompleted is the 'COMPLETED' status.
	StatusCompleted Status = 6
)

// String satisfies the [fmt.Stringer] interface.
func (s Status) String() string {
	switch s {
	case StatusOpen:
		return "OPEN"
	case StatusAccepted:
		return "ACCEPTED"
	case StatusConfirmed:
		return "CONFIRMED"
	case StatusCancelled:
		return "CANCELLED"
	case StatusReservationFailed:
		return "RESERVATION_FAILED"
	case StatusCompleted:
		return "COMPLETED"
	}
	return fmt.Sprintf("Status(%d)", s)
}

// MarshalText marshals [Status] into text.
func (s Status) MarshalText() ([]byte, error) {
	return []byte(s.String()), nil
}

// UnmarshalText unmarshals [Status] from text.
func (s *Status) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "OPEN":
		*s = StatusOpen
	case "ACCEPTED":
		*s = StatusAccepted
	case "CONFIRMED":
		*s = StatusConfirmed
	case "CANCELLED":
		*s = StatusCancelled
	case "RESERVATION_FAILED":
		*s = StatusReservationFailed
	case "COMPLETED":
		*s = StatusCompleted
	default:
		return ErrInvalidStatus(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (s Status) Value() (driver.Value, error) {
	return s.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (s *Status) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return s.UnmarshalText(x)
	case string:
		return s.UnmarshalText([]byte(x))
	}
	return ErrInvalidStatus(fmt.Sprintf("%T", v))
}

// NullStatus represents a null 'status' enum for schema 'xtp_tour'.
type NullStatus struct {
	Status Status
	// Valid is true if [Status] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Status.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (ns *NullStatus) Scan(v interface{}) error {
	if v == nil {
		ns.Status, ns.Valid = 0, false
		return nil
	}
	err := ns.Status.Scan(v)
	ns.Valid = err == nil
	return err
}

// ErrInvalidStatus is the invalid [Status] error.
type ErrInvalidStatus string

// Error satisfies the error interface.
func (err ErrInvalidStatus) Error() string {
	return fmt.Sprintf("invalid Status(%s)", string(err))
}
