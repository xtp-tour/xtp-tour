// Package model contains generated code for schema 'xtp_tour'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// CourtGroup represents a row from 'xtp_tour.court_groups'.
type CourtGroup struct {
	ID              int            `json:"id"`               // id
	FacilityID      string         `json:"facility_id"`      // facility_id
	Surface         Surface        `json:"surface"`          // surface
	Type            Type           `json:"type"`             // type
	Light           sql.NullBool   `json:"light"`            // light
	Heating         sql.NullBool   `json:"heating"`          // heating
	ReservationLink sql.NullString `json:"reservation_link"` // reservation_link
	CourtNames      sql.NullString `json:"court_names"`      // court_names
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [CourtGroup] exists in the database.
func (cg *CourtGroup) Exists() bool {
	return cg._exists
}

// Deleted returns true when the [CourtGroup] has been marked for deletion
// from the database.
func (cg *CourtGroup) Deleted() bool {
	return cg._deleted
}

// Insert inserts the [CourtGroup] to the database.
func (cg *CourtGroup) Insert(ctx context.Context, db DB) error {
	switch {
	case cg._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cg._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO xtp_tour.court_groups (` +
		`facility_id, surface, type, light, heating, reservation_link, court_names` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, cg.FacilityID, cg.Surface, cg.Type, cg.Light, cg.Heating, cg.ReservationLink, cg.CourtNames)
	res, err := db.ExecContext(ctx, sqlstr, cg.FacilityID, cg.Surface, cg.Type, cg.Light, cg.Heating, cg.ReservationLink, cg.CourtNames)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	cg.ID = int(id)
	// set exists
	cg._exists = true
	return nil
}

// Update updates a [CourtGroup] in the database.
func (cg *CourtGroup) Update(ctx context.Context, db DB) error {
	switch {
	case !cg._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case cg._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE xtp_tour.court_groups SET ` +
		`facility_id = ?, surface = ?, type = ?, light = ?, heating = ?, reservation_link = ?, court_names = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, cg.FacilityID, cg.Surface, cg.Type, cg.Light, cg.Heating, cg.ReservationLink, cg.CourtNames, cg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cg.FacilityID, cg.Surface, cg.Type, cg.Light, cg.Heating, cg.ReservationLink, cg.CourtNames, cg.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [CourtGroup] to the database.
func (cg *CourtGroup) Save(ctx context.Context, db DB) error {
	if cg.Exists() {
		return cg.Update(ctx, db)
	}
	return cg.Insert(ctx, db)
}

// Upsert performs an upsert for [CourtGroup].
func (cg *CourtGroup) Upsert(ctx context.Context, db DB) error {
	switch {
	case cg._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO xtp_tour.court_groups (` +
		`id, facility_id, surface, type, light, heating, reservation_link, court_names` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`facility_id = VALUES(facility_id), surface = VALUES(surface), type = VALUES(type), light = VALUES(light), heating = VALUES(heating), reservation_link = VALUES(reservation_link), court_names = VALUES(court_names)`
	// run
	logf(sqlstr, cg.ID, cg.FacilityID, cg.Surface, cg.Type, cg.Light, cg.Heating, cg.ReservationLink, cg.CourtNames)
	if _, err := db.ExecContext(ctx, sqlstr, cg.ID, cg.FacilityID, cg.Surface, cg.Type, cg.Light, cg.Heating, cg.ReservationLink, cg.CourtNames); err != nil {
		return logerror(err)
	}
	// set exists
	cg._exists = true
	return nil
}

// Delete deletes the [CourtGroup] from the database.
func (cg *CourtGroup) Delete(ctx context.Context, db DB) error {
	switch {
	case !cg._exists: // doesn't exist
		return nil
	case cg._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM xtp_tour.court_groups ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, cg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cg.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	cg._deleted = true
	return nil
}

// CourtGroupByID retrieves a row from 'xtp_tour.court_groups' as a [CourtGroup].
//
// Generated from index 'court_groups_id_pkey'.
func CourtGroupByID(ctx context.Context, db DB, id int) (*CourtGroup, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, facility_id, surface, type, light, heating, reservation_link, court_names ` +
		`FROM xtp_tour.court_groups ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	cg := CourtGroup{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&cg.ID, &cg.FacilityID, &cg.Surface, &cg.Type, &cg.Light, &cg.Heating, &cg.ReservationLink, &cg.CourtNames); err != nil {
		return nil, logerror(err)
	}
	return &cg, nil
}

// CourtGroupsByFacilityID retrieves a row from 'xtp_tour.court_groups' as a [CourtGroup].
//
// Generated from index 'idx_court_groups_facility'.
func CourtGroupsByFacilityID(ctx context.Context, db DB, facilityID string) ([]*CourtGroup, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, facility_id, surface, type, light, heating, reservation_link, court_names ` +
		`FROM xtp_tour.court_groups ` +
		`WHERE facility_id = ?`
	// run
	logf(sqlstr, facilityID)
	rows, err := db.QueryContext(ctx, sqlstr, facilityID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*CourtGroup
	for rows.Next() {
		cg := CourtGroup{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cg.ID, &cg.FacilityID, &cg.Surface, &cg.Type, &cg.Light, &cg.Heating, &cg.ReservationLink, &cg.CourtNames); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cg)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Facility returns the Facility associated with the [CourtGroup]'s (FacilityID).
//
// Generated from foreign key 'court_groups_ibfk_1'.
func (cg *CourtGroup) Facility(ctx context.Context, db DB) (*Facility, error) {
	return FacilityByID(ctx, db, cg.FacilityID)
}
