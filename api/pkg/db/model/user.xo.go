package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// User represents a row from 'xtp_tour.users'.
type User struct {
	UID         string         `json:"uid"`          // uid
	PhoneNumber string         `json:"phone_number"` // phone_number
	Country     string         `json:"country"`      // country
	ExternalID  sql.NullString `json:"external_id"`  // external_id
	CreatedAt   sql.NullTime   `json:"created_at"`   // created_at
	UpdatedAt   sql.NullTime   `json:"updated_at"`   // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [User] exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the [User] has been marked for deletion
// from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the [User] to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO xtp_tour.users (` +
		`uid, phone_number, country, external_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, u.UID, u.PhoneNumber, u.Country, u.ExternalID, u.CreatedAt, u.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, u.UID, u.PhoneNumber, u.Country, u.ExternalID, u.CreatedAt, u.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Update updates a [User] in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE xtp_tour.users SET ` +
		`phone_number = ?, country = ?, external_id = ?, created_at = ?, updated_at = ? ` +
		`WHERE uid = ?`
	// run
	logf(sqlstr, u.PhoneNumber, u.Country, u.ExternalID, u.CreatedAt, u.UpdatedAt, u.UID)
	if _, err := db.ExecContext(ctx, sqlstr, u.PhoneNumber, u.Country, u.ExternalID, u.CreatedAt, u.UpdatedAt, u.UID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [User] to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for [User].
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO xtp_tour.users (` +
		`uid, phone_number, country, external_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`uid = VALUES(uid), phone_number = VALUES(phone_number), country = VALUES(country), external_id = VALUES(external_id), created_at = VALUES(created_at), updated_at = VALUES(updated_at)`
	// run
	logf(sqlstr, u.UID, u.PhoneNumber, u.Country, u.ExternalID, u.CreatedAt, u.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, u.UID, u.PhoneNumber, u.Country, u.ExternalID, u.CreatedAt, u.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the [User] from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM xtp_tour.users ` +
		`WHERE uid = ?`
	// run
	logf(sqlstr, u.UID)
	if _, err := db.ExecContext(ctx, sqlstr, u.UID); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserByUID retrieves a row from 'xtp_tour.users' as a [User].
//
// Generated from index 'users_uid_pkey'.
func UserByUID(ctx context.Context, db DB, uid string) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`uid, phone_number, country, external_id, created_at, updated_at ` +
		`FROM xtp_tour.users ` +
		`WHERE uid = ?`
	// run
	logf(sqlstr, uid)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, uid).Scan(&u.UID, &u.PhoneNumber, &u.Country, &u.ExternalID, &u.CreatedAt, &u.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
