package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// JoinRequestTimeSlot represents a row from 'xtp_tour.join_request_time_slots'.
type JoinRequestTimeSlot struct {
	ID            string    `json:"id"`              // id
	JoinRequestID string    `json:"join_request_id"` // join_request_id
	Date          time.Time `json:"date"`            // date
	Time          int       `json:"time"`            // time
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [JoinRequestTimeSlot] exists in the database.
func (jrts *JoinRequestTimeSlot) Exists() bool {
	return jrts._exists
}

// Deleted returns true when the [JoinRequestTimeSlot] has been marked for deletion
// from the database.
func (jrts *JoinRequestTimeSlot) Deleted() bool {
	return jrts._deleted
}

// Insert inserts the [JoinRequestTimeSlot] to the database.
func (jrts *JoinRequestTimeSlot) Insert(ctx context.Context, db DB) error {
	switch {
	case jrts._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case jrts._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO xtp_tour.join_request_time_slots (` +
		`id, join_request_id, date, time` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, jrts.ID, jrts.JoinRequestID, jrts.Date, jrts.Time)
	if _, err := db.ExecContext(ctx, sqlstr, jrts.ID, jrts.JoinRequestID, jrts.Date, jrts.Time); err != nil {
		return logerror(err)
	}
	// set exists
	jrts._exists = true
	return nil
}

// Update updates a [JoinRequestTimeSlot] in the database.
func (jrts *JoinRequestTimeSlot) Update(ctx context.Context, db DB) error {
	switch {
	case !jrts._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case jrts._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE xtp_tour.join_request_time_slots SET ` +
		`join_request_id = ?, date = ?, time = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, jrts.JoinRequestID, jrts.Date, jrts.Time, jrts.ID)
	if _, err := db.ExecContext(ctx, sqlstr, jrts.JoinRequestID, jrts.Date, jrts.Time, jrts.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [JoinRequestTimeSlot] to the database.
func (jrts *JoinRequestTimeSlot) Save(ctx context.Context, db DB) error {
	if jrts.Exists() {
		return jrts.Update(ctx, db)
	}
	return jrts.Insert(ctx, db)
}

// Upsert performs an upsert for [JoinRequestTimeSlot].
func (jrts *JoinRequestTimeSlot) Upsert(ctx context.Context, db DB) error {
	switch {
	case jrts._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO xtp_tour.join_request_time_slots (` +
		`id, join_request_id, date, time` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), join_request_id = VALUES(join_request_id), date = VALUES(date), time = VALUES(time)`
	// run
	logf(sqlstr, jrts.ID, jrts.JoinRequestID, jrts.Date, jrts.Time)
	if _, err := db.ExecContext(ctx, sqlstr, jrts.ID, jrts.JoinRequestID, jrts.Date, jrts.Time); err != nil {
		return logerror(err)
	}
	// set exists
	jrts._exists = true
	return nil
}

// Delete deletes the [JoinRequestTimeSlot] from the database.
func (jrts *JoinRequestTimeSlot) Delete(ctx context.Context, db DB) error {
	switch {
	case !jrts._exists: // doesn't exist
		return nil
	case jrts._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM xtp_tour.join_request_time_slots ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, jrts.ID)
	if _, err := db.ExecContext(ctx, sqlstr, jrts.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	jrts._deleted = true
	return nil
}

// JoinRequestTimeSlotsByJoinRequestID retrieves a row from 'xtp_tour.join_request_time_slots' as a [JoinRequestTimeSlot].
//
// Generated from index 'join_request_id'.
func JoinRequestTimeSlotsByJoinRequestID(ctx context.Context, db DB, joinRequestID string) ([]*JoinRequestTimeSlot, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, join_request_id, date, time ` +
		`FROM xtp_tour.join_request_time_slots ` +
		`WHERE join_request_id = ?`
	// run
	logf(sqlstr, joinRequestID)
	rows, err := db.QueryContext(ctx, sqlstr, joinRequestID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*JoinRequestTimeSlot
	for rows.Next() {
		jrts := JoinRequestTimeSlot{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&jrts.ID, &jrts.JoinRequestID, &jrts.Date, &jrts.Time); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &jrts)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// JoinRequestTimeSlotByID retrieves a row from 'xtp_tour.join_request_time_slots' as a [JoinRequestTimeSlot].
//
// Generated from index 'join_request_time_slots_id_pkey'.
func JoinRequestTimeSlotByID(ctx context.Context, db DB, id string) (*JoinRequestTimeSlot, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, join_request_id, date, time ` +
		`FROM xtp_tour.join_request_time_slots ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	jrts := JoinRequestTimeSlot{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&jrts.ID, &jrts.JoinRequestID, &jrts.Date, &jrts.Time); err != nil {
		return nil, logerror(err)
	}
	return &jrts, nil
}

// JoinRequest returns the JoinRequest associated with the [JoinRequestTimeSlot]'s (JoinRequestID).
//
// Generated from foreign key 'join_request_time_slots_ibfk_1'.
func (jrts *JoinRequestTimeSlot) JoinRequest(ctx context.Context, db DB) (*JoinRequest, error) {
	return JoinRequestByID(ctx, db, jrts.JoinRequestID)
}
