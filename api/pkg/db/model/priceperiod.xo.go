package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// PricePeriod represents a row from 'xtp_tour.price_periods'.
type PricePeriod struct {
	ID           int       `json:"id"`             // id
	CourtGroupID int       `json:"court_group_id"` // court_group_id
	ValidFrom    time.Time `json:"valid_from"`     // valid_from
	ValidTo      time.Time `json:"valid_to"`       // valid_to
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [PricePeriod] exists in the database.
func (pp *PricePeriod) Exists() bool {
	return pp._exists
}

// Deleted returns true when the [PricePeriod] has been marked for deletion
// from the database.
func (pp *PricePeriod) Deleted() bool {
	return pp._deleted
}

// Insert inserts the [PricePeriod] to the database.
func (pp *PricePeriod) Insert(ctx context.Context, db DB) error {
	switch {
	case pp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO xtp_tour.price_periods (` +
		`court_group_id, valid_from, valid_to` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, pp.CourtGroupID, pp.ValidFrom, pp.ValidTo)
	res, err := db.ExecContext(ctx, sqlstr, pp.CourtGroupID, pp.ValidFrom, pp.ValidTo)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	pp.ID = int(id)
	// set exists
	pp._exists = true
	return nil
}

// Update updates a [PricePeriod] in the database.
func (pp *PricePeriod) Update(ctx context.Context, db DB) error {
	switch {
	case !pp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE xtp_tour.price_periods SET ` +
		`court_group_id = ?, valid_from = ?, valid_to = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, pp.CourtGroupID, pp.ValidFrom, pp.ValidTo, pp.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pp.CourtGroupID, pp.ValidFrom, pp.ValidTo, pp.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [PricePeriod] to the database.
func (pp *PricePeriod) Save(ctx context.Context, db DB) error {
	if pp.Exists() {
		return pp.Update(ctx, db)
	}
	return pp.Insert(ctx, db)
}

// Upsert performs an upsert for [PricePeriod].
func (pp *PricePeriod) Upsert(ctx context.Context, db DB) error {
	switch {
	case pp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO xtp_tour.price_periods (` +
		`id, court_group_id, valid_from, valid_to` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`court_group_id = VALUES(court_group_id), valid_from = VALUES(valid_from), valid_to = VALUES(valid_to)`
	// run
	logf(sqlstr, pp.ID, pp.CourtGroupID, pp.ValidFrom, pp.ValidTo)
	if _, err := db.ExecContext(ctx, sqlstr, pp.ID, pp.CourtGroupID, pp.ValidFrom, pp.ValidTo); err != nil {
		return logerror(err)
	}
	// set exists
	pp._exists = true
	return nil
}

// Delete deletes the [PricePeriod] from the database.
func (pp *PricePeriod) Delete(ctx context.Context, db DB) error {
	switch {
	case !pp._exists: // doesn't exist
		return nil
	case pp._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM xtp_tour.price_periods ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, pp.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pp.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pp._deleted = true
	return nil
}

// PricePeriodsByCourtGroupID retrieves a row from 'xtp_tour.price_periods' as a [PricePeriod].
//
// Generated from index 'idx_price_periods_court_group'.
func PricePeriodsByCourtGroupID(ctx context.Context, db DB, courtGroupID int) ([]*PricePeriod, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, court_group_id, valid_from, valid_to ` +
		`FROM xtp_tour.price_periods ` +
		`WHERE court_group_id = ?`
	// run
	logf(sqlstr, courtGroupID)
	rows, err := db.QueryContext(ctx, sqlstr, courtGroupID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*PricePeriod
	for rows.Next() {
		pp := PricePeriod{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&pp.ID, &pp.CourtGroupID, &pp.ValidFrom, &pp.ValidTo); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &pp)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PricePeriodByID retrieves a row from 'xtp_tour.price_periods' as a [PricePeriod].
//
// Generated from index 'price_periods_id_pkey'.
func PricePeriodByID(ctx context.Context, db DB, id int) (*PricePeriod, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, court_group_id, valid_from, valid_to ` +
		`FROM xtp_tour.price_periods ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	pp := PricePeriod{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&pp.ID, &pp.CourtGroupID, &pp.ValidFrom, &pp.ValidTo); err != nil {
		return nil, logerror(err)
	}
	return &pp, nil
}

// CourtGroup returns the CourtGroup associated with the [PricePeriod]'s (CourtGroupID).
//
// Generated from foreign key 'price_periods_ibfk_1'.
func (pp *PricePeriod) CourtGroup(ctx context.Context, db DB) (*CourtGroup, error) {
	return CourtGroupByID(ctx, db, pp.CourtGroupID)
}
