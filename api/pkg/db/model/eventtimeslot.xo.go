package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// EventTimeSlot represents a row from 'xtp_tour.event_time_slots'.
type EventTimeSlot struct {
	ID      string    `json:"id"`       // id
	EventID string    `json:"event_id"` // event_id
	Date    time.Time `json:"date"`     // date
	Time    int       `json:"time"`     // time
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [EventTimeSlot] exists in the database.
func (ets *EventTimeSlot) Exists() bool {
	return ets._exists
}

// Deleted returns true when the [EventTimeSlot] has been marked for deletion
// from the database.
func (ets *EventTimeSlot) Deleted() bool {
	return ets._deleted
}

// Insert inserts the [EventTimeSlot] to the database.
func (ets *EventTimeSlot) Insert(ctx context.Context, db DB) error {
	switch {
	case ets._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ets._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO xtp_tour.event_time_slots (` +
		`id, event_id, date, time` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, ets.ID, ets.EventID, ets.Date, ets.Time)
	if _, err := db.ExecContext(ctx, sqlstr, ets.ID, ets.EventID, ets.Date, ets.Time); err != nil {
		return logerror(err)
	}
	// set exists
	ets._exists = true
	return nil
}

// Update updates a [EventTimeSlot] in the database.
func (ets *EventTimeSlot) Update(ctx context.Context, db DB) error {
	switch {
	case !ets._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ets._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE xtp_tour.event_time_slots SET ` +
		`event_id = ?, date = ?, time = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, ets.EventID, ets.Date, ets.Time, ets.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ets.EventID, ets.Date, ets.Time, ets.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [EventTimeSlot] to the database.
func (ets *EventTimeSlot) Save(ctx context.Context, db DB) error {
	if ets.Exists() {
		return ets.Update(ctx, db)
	}
	return ets.Insert(ctx, db)
}

// Upsert performs an upsert for [EventTimeSlot].
func (ets *EventTimeSlot) Upsert(ctx context.Context, db DB) error {
	switch {
	case ets._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO xtp_tour.event_time_slots (` +
		`id, event_id, date, time` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), event_id = VALUES(event_id), date = VALUES(date), time = VALUES(time)`
	// run
	logf(sqlstr, ets.ID, ets.EventID, ets.Date, ets.Time)
	if _, err := db.ExecContext(ctx, sqlstr, ets.ID, ets.EventID, ets.Date, ets.Time); err != nil {
		return logerror(err)
	}
	// set exists
	ets._exists = true
	return nil
}

// Delete deletes the [EventTimeSlot] from the database.
func (ets *EventTimeSlot) Delete(ctx context.Context, db DB) error {
	switch {
	case !ets._exists: // doesn't exist
		return nil
	case ets._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM xtp_tour.event_time_slots ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, ets.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ets.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ets._deleted = true
	return nil
}

// EventTimeSlotsByEventID retrieves a row from 'xtp_tour.event_time_slots' as a [EventTimeSlot].
//
// Generated from index 'event_id'.
func EventTimeSlotsByEventID(ctx context.Context, db DB, eventID string) ([]*EventTimeSlot, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, event_id, date, time ` +
		`FROM xtp_tour.event_time_slots ` +
		`WHERE event_id = ?`
	// run
	logf(sqlstr, eventID)
	rows, err := db.QueryContext(ctx, sqlstr, eventID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*EventTimeSlot
	for rows.Next() {
		ets := EventTimeSlot{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ets.ID, &ets.EventID, &ets.Date, &ets.Time); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ets)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// EventTimeSlotByID retrieves a row from 'xtp_tour.event_time_slots' as a [EventTimeSlot].
//
// Generated from index 'event_time_slots_id_pkey'.
func EventTimeSlotByID(ctx context.Context, db DB, id string) (*EventTimeSlot, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, event_id, date, time ` +
		`FROM xtp_tour.event_time_slots ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	ets := EventTimeSlot{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ets.ID, &ets.EventID, &ets.Date, &ets.Time); err != nil {
		return nil, logerror(err)
	}
	return &ets, nil
}

// Event returns the Event associated with the [EventTimeSlot]'s (EventID).
//
// Generated from foreign key 'event_time_slots_ibfk_1'.
func (ets *EventTimeSlot) Event(ctx context.Context, db DB) (*Event, error) {
	return EventByID(ctx, db, ets.EventID)
}
