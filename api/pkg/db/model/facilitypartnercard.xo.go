package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// FacilityPartnerCard represents a row from 'xtp_tour.facility_partner_cards'.
type FacilityPartnerCard struct {
	FacilityID    string `json:"facility_id"`     // facility_id
	PartnerCardID string `json:"partner_card_id"` // partner_card_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [FacilityPartnerCard] exists in the database.
func (fpc *FacilityPartnerCard) Exists() bool {
	return fpc._exists
}

// Deleted returns true when the [FacilityPartnerCard] has been marked for deletion
// from the database.
func (fpc *FacilityPartnerCard) Deleted() bool {
	return fpc._deleted
}

// Insert inserts the [FacilityPartnerCard] to the database.
func (fpc *FacilityPartnerCard) Insert(ctx context.Context, db DB) error {
	switch {
	case fpc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case fpc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO xtp_tour.facility_partner_cards (` +
		`facility_id, partner_card_id` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, fpc.FacilityID, fpc.PartnerCardID)
	if _, err := db.ExecContext(ctx, sqlstr, fpc.FacilityID, fpc.PartnerCardID); err != nil {
		return logerror(err)
	}
	// set exists
	fpc._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [FacilityPartnerCard] from the database.
func (fpc *FacilityPartnerCard) Delete(ctx context.Context, db DB) error {
	switch {
	case !fpc._exists: // doesn't exist
		return nil
	case fpc._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM xtp_tour.facility_partner_cards ` +
		`WHERE facility_id = ? AND partner_card_id = ?`
	// run
	logf(sqlstr, fpc.FacilityID, fpc.PartnerCardID)
	if _, err := db.ExecContext(ctx, sqlstr, fpc.FacilityID, fpc.PartnerCardID); err != nil {
		return logerror(err)
	}
	// set deleted
	fpc._deleted = true
	return nil
}

// FacilityPartnerCardByFacilityIDPartnerCardID retrieves a row from 'xtp_tour.facility_partner_cards' as a [FacilityPartnerCard].
//
// Generated from index 'facility_partner_cards_facility_id_partner_card_id_pkey'.
func FacilityPartnerCardByFacilityIDPartnerCardID(ctx context.Context, db DB, facilityID, partnerCardID string) (*FacilityPartnerCard, error) {
	// query
	const sqlstr = `SELECT ` +
		`facility_id, partner_card_id ` +
		`FROM xtp_tour.facility_partner_cards ` +
		`WHERE facility_id = ? AND partner_card_id = ?`
	// run
	logf(sqlstr, facilityID, partnerCardID)
	fpc := FacilityPartnerCard{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, facilityID, partnerCardID).Scan(&fpc.FacilityID, &fpc.PartnerCardID); err != nil {
		return nil, logerror(err)
	}
	return &fpc, nil
}

// FacilityPartnerCardsByPartnerCardID retrieves a row from 'xtp_tour.facility_partner_cards' as a [FacilityPartnerCard].
//
// Generated from index 'partner_card_id'.
func FacilityPartnerCardsByPartnerCardID(ctx context.Context, db DB, partnerCardID string) ([]*FacilityPartnerCard, error) {
	// query
	const sqlstr = `SELECT ` +
		`facility_id, partner_card_id ` +
		`FROM xtp_tour.facility_partner_cards ` +
		`WHERE partner_card_id = ?`
	// run
	logf(sqlstr, partnerCardID)
	rows, err := db.QueryContext(ctx, sqlstr, partnerCardID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*FacilityPartnerCard
	for rows.Next() {
		fpc := FacilityPartnerCard{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&fpc.FacilityID, &fpc.PartnerCardID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fpc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Facility returns the Facility associated with the [FacilityPartnerCard]'s (FacilityID).
//
// Generated from foreign key 'facility_partner_cards_ibfk_1'.
func (fpc *FacilityPartnerCard) Facility(ctx context.Context, db DB) (*Facility, error) {
	return FacilityByID(ctx, db, fpc.FacilityID)
}

// PartnerCard returns the PartnerCard associated with the [FacilityPartnerCard]'s (PartnerCardID).
//
// Generated from foreign key 'facility_partner_cards_ibfk_2'.
func (fpc *FacilityPartnerCard) PartnerCard(ctx context.Context, db DB) (*PartnerCard, error) {
	return PartnerCardByID(ctx, db, fpc.PartnerCardID)
}
