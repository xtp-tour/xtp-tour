package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// JoinRequest represents a row from 'xtp_tour.join_requests'.
type JoinRequest struct {
	ID        string         `json:"id"`         // id
	EventID   string         `json:"event_id"`   // event_id
	UserID    string         `json:"user_id"`    // user_id
	Status    Status         `json:"status"`     // status
	Comment   sql.NullString `json:"comment"`    // comment
	CreatedAt time.Time      `json:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [JoinRequest] exists in the database.
func (jr *JoinRequest) Exists() bool {
	return jr._exists
}

// Deleted returns true when the [JoinRequest] has been marked for deletion
// from the database.
func (jr *JoinRequest) Deleted() bool {
	return jr._deleted
}

// Insert inserts the [JoinRequest] to the database.
func (jr *JoinRequest) Insert(ctx context.Context, db DB) error {
	switch {
	case jr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case jr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO xtp_tour.join_requests (` +
		`id, event_id, user_id, status, comment, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, jr.ID, jr.EventID, jr.UserID, jr.Status, jr.Comment, jr.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, jr.ID, jr.EventID, jr.UserID, jr.Status, jr.Comment, jr.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	jr._exists = true
	return nil
}

// Update updates a [JoinRequest] in the database.
func (jr *JoinRequest) Update(ctx context.Context, db DB) error {
	switch {
	case !jr._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case jr._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE xtp_tour.join_requests SET ` +
		`event_id = ?, user_id = ?, status = ?, comment = ?, created_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, jr.EventID, jr.UserID, jr.Status, jr.Comment, jr.CreatedAt, jr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, jr.EventID, jr.UserID, jr.Status, jr.Comment, jr.CreatedAt, jr.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [JoinRequest] to the database.
func (jr *JoinRequest) Save(ctx context.Context, db DB) error {
	if jr.Exists() {
		return jr.Update(ctx, db)
	}
	return jr.Insert(ctx, db)
}

// Upsert performs an upsert for [JoinRequest].
func (jr *JoinRequest) Upsert(ctx context.Context, db DB) error {
	switch {
	case jr._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO xtp_tour.join_requests (` +
		`id, event_id, user_id, status, comment, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), event_id = VALUES(event_id), user_id = VALUES(user_id), status = VALUES(status), comment = VALUES(comment), created_at = VALUES(created_at)`
	// run
	logf(sqlstr, jr.ID, jr.EventID, jr.UserID, jr.Status, jr.Comment, jr.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, jr.ID, jr.EventID, jr.UserID, jr.Status, jr.Comment, jr.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	jr._exists = true
	return nil
}

// Delete deletes the [JoinRequest] from the database.
func (jr *JoinRequest) Delete(ctx context.Context, db DB) error {
	switch {
	case !jr._exists: // doesn't exist
		return nil
	case jr._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM xtp_tour.join_requests ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, jr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, jr.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	jr._deleted = true
	return nil
}

// JoinRequestsByEventID retrieves a row from 'xtp_tour.join_requests' as a [JoinRequest].
//
// Generated from index 'event_id'.
func JoinRequestsByEventID(ctx context.Context, db DB, eventID string) ([]*JoinRequest, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, event_id, user_id, status, comment, created_at ` +
		`FROM xtp_tour.join_requests ` +
		`WHERE event_id = ?`
	// run
	logf(sqlstr, eventID)
	rows, err := db.QueryContext(ctx, sqlstr, eventID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*JoinRequest
	for rows.Next() {
		jr := JoinRequest{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&jr.ID, &jr.EventID, &jr.UserID, &jr.Status, &jr.Comment, &jr.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &jr)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// JoinRequestByID retrieves a row from 'xtp_tour.join_requests' as a [JoinRequest].
//
// Generated from index 'join_requests_id_pkey'.
func JoinRequestByID(ctx context.Context, db DB, id string) (*JoinRequest, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, event_id, user_id, status, comment, created_at ` +
		`FROM xtp_tour.join_requests ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	jr := JoinRequest{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&jr.ID, &jr.EventID, &jr.UserID, &jr.Status, &jr.Comment, &jr.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &jr, nil
}

// Event returns the Event associated with the [JoinRequest]'s (EventID).
//
// Generated from foreign key 'join_requests_ibfk_1'.
func (jr *JoinRequest) Event(ctx context.Context, db DB) (*Event, error) {
	return EventByID(ctx, db, jr.EventID)
}
