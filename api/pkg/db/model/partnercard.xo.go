package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// PartnerCard represents a row from 'xtp_tour.partner_cards'.
type PartnerCard struct {
	ID   string `json:"id"`   // id
	Name string `json:"name"` // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [PartnerCard] exists in the database.
func (pc *PartnerCard) Exists() bool {
	return pc._exists
}

// Deleted returns true when the [PartnerCard] has been marked for deletion
// from the database.
func (pc *PartnerCard) Deleted() bool {
	return pc._deleted
}

// Insert inserts the [PartnerCard] to the database.
func (pc *PartnerCard) Insert(ctx context.Context, db DB) error {
	switch {
	case pc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO xtp_tour.partner_cards (` +
		`id, name` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, pc.ID, pc.Name)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ID, pc.Name); err != nil {
		return logerror(err)
	}
	// set exists
	pc._exists = true
	return nil
}

// Update updates a [PartnerCard] in the database.
func (pc *PartnerCard) Update(ctx context.Context, db DB) error {
	switch {
	case !pc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE xtp_tour.partner_cards SET ` +
		`name = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, pc.Name, pc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pc.Name, pc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [PartnerCard] to the database.
func (pc *PartnerCard) Save(ctx context.Context, db DB) error {
	if pc.Exists() {
		return pc.Update(ctx, db)
	}
	return pc.Insert(ctx, db)
}

// Upsert performs an upsert for [PartnerCard].
func (pc *PartnerCard) Upsert(ctx context.Context, db DB) error {
	switch {
	case pc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO xtp_tour.partner_cards (` +
		`id, name` +
		`) VALUES (` +
		`?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), name = VALUES(name)`
	// run
	logf(sqlstr, pc.ID, pc.Name)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ID, pc.Name); err != nil {
		return logerror(err)
	}
	// set exists
	pc._exists = true
	return nil
}

// Delete deletes the [PartnerCard] from the database.
func (pc *PartnerCard) Delete(ctx context.Context, db DB) error {
	switch {
	case !pc._exists: // doesn't exist
		return nil
	case pc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM xtp_tour.partner_cards ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, pc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pc._deleted = true
	return nil
}

// PartnerCardByID retrieves a row from 'xtp_tour.partner_cards' as a [PartnerCard].
//
// Generated from index 'partner_cards_id_pkey'.
func PartnerCardByID(ctx context.Context, db DB, id string) (*PartnerCard, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM xtp_tour.partner_cards ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	pc := PartnerCard{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&pc.ID, &pc.Name); err != nil {
		return nil, logerror(err)
	}
	return &pc, nil
}
