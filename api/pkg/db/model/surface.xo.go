package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// Surface is the 'surface' enum type from schema 'xtp_tour'.
type Surface uint16

// Surface values.
const (
	// SurfaceHard is the 'hard' surface.
	SurfaceHard Surface = 1
	// SurfaceClay is the 'clay' surface.
	SurfaceClay Surface = 2
	// SurfaceArtificialGrass is the 'artificial-grass' surface.
	SurfaceArtificialGrass Surface = 3
	// SurfaceCarpet is the 'carpet' surface.
	SurfaceCarpet Surface = 4
	// SurfaceGrass is the 'grass' surface.
	SurfaceGrass Surface = 5
)

// String satisfies the [fmt.Stringer] interface.
func (s Surface) String() string {
	switch s {
	case SurfaceHard:
		return "hard"
	case SurfaceClay:
		return "clay"
	case SurfaceArtificialGrass:
		return "artificial-grass"
	case SurfaceCarpet:
		return "carpet"
	case SurfaceGrass:
		return "grass"
	}
	return fmt.Sprintf("Surface(%d)", s)
}

// MarshalText marshals [Surface] into text.
func (s Surface) MarshalText() ([]byte, error) {
	return []byte(s.String()), nil
}

// UnmarshalText unmarshals [Surface] from text.
func (s *Surface) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "hard":
		*s = SurfaceHard
	case "clay":
		*s = SurfaceClay
	case "artificial-grass":
		*s = SurfaceArtificialGrass
	case "carpet":
		*s = SurfaceCarpet
	case "grass":
		*s = SurfaceGrass
	default:
		return ErrInvalidSurface(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (s Surface) Value() (driver.Value, error) {
	return s.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (s *Surface) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return s.UnmarshalText(x)
	case string:
		return s.UnmarshalText([]byte(x))
	}
	return ErrInvalidSurface(fmt.Sprintf("%T", v))
}

// NullSurface represents a null 'surface' enum for schema 'xtp_tour'.
type NullSurface struct {
	Surface Surface
	// Valid is true if [Surface] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (ns NullSurface) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Surface.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (ns *NullSurface) Scan(v interface{}) error {
	if v == nil {
		ns.Surface, ns.Valid = 0, false
		return nil
	}
	err := ns.Surface.Scan(v)
	ns.Valid = err == nil
	return err
}

// ErrInvalidSurface is the invalid [Surface] error.
type ErrInvalidSurface string

// Error satisfies the error interface.
func (err ErrInvalidSurface) Error() string {
	return fmt.Sprintf("invalid Surface(%s)", string(err))
}
