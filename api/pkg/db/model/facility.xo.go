package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Facility represents a row from 'xtp_tour.facilities'.
type Facility struct {
	ID             string         `json:"id"`               // id
	Name           string         `json:"name"`             // name
	Address        string         `json:"address"`          // address
	GoogleMapsLink sql.NullString `json:"google_maps_link"` // google_maps_link
	Website        sql.NullString `json:"website"`          // website
	Country        string         `json:"country"`          // country
	Location       Point          `json:"location"`         // location
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Facility] exists in the database.
func (f *Facility) Exists() bool {
	return f._exists
}

// Deleted returns true when the [Facility] has been marked for deletion
// from the database.
func (f *Facility) Deleted() bool {
	return f._deleted
}

// Insert inserts the [Facility] to the database.
func (f *Facility) Insert(ctx context.Context, db DB) error {
	switch {
	case f._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case f._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO xtp_tour.facilities (` +
		`id, name, address, google_maps_link, website, country, location` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, f.ID, f.Name, f.Address, f.GoogleMapsLink, f.Website, f.Country, f.Location)
	if _, err := db.ExecContext(ctx, sqlstr, f.ID, f.Name, f.Address, f.GoogleMapsLink, f.Website, f.Country, f.Location); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Update updates a [Facility] in the database.
func (f *Facility) Update(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case f._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE xtp_tour.facilities SET ` +
		`name = ?, address = ?, google_maps_link = ?, website = ?, country = ?, location = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, f.Name, f.Address, f.GoogleMapsLink, f.Website, f.Country, f.Location, f.ID)
	if _, err := db.ExecContext(ctx, sqlstr, f.Name, f.Address, f.GoogleMapsLink, f.Website, f.Country, f.Location, f.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Facility] to the database.
func (f *Facility) Save(ctx context.Context, db DB) error {
	if f.Exists() {
		return f.Update(ctx, db)
	}
	return f.Insert(ctx, db)
}

// Upsert performs an upsert for [Facility].
func (f *Facility) Upsert(ctx context.Context, db DB) error {
	switch {
	case f._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO xtp_tour.facilities (` +
		`id, name, address, google_maps_link, website, country, location` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), name = VALUES(name), address = VALUES(address), google_maps_link = VALUES(google_maps_link), website = VALUES(website), country = VALUES(country), location = VALUES(location)`
	// run
	logf(sqlstr, f.ID, f.Name, f.Address, f.GoogleMapsLink, f.Website, f.Country, f.Location)
	if _, err := db.ExecContext(ctx, sqlstr, f.ID, f.Name, f.Address, f.GoogleMapsLink, f.Website, f.Country, f.Location); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Delete deletes the [Facility] from the database.
func (f *Facility) Delete(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return nil
	case f._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM xtp_tour.facilities ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, f.ID)
	if _, err := db.ExecContext(ctx, sqlstr, f.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	f._deleted = true
	return nil
}

// FacilityByID retrieves a row from 'xtp_tour.facilities' as a [Facility].
//
// Generated from index 'facilities_id_pkey'.
func FacilityByID(ctx context.Context, db DB, id string) (*Facility, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, address, google_maps_link, website, country, location ` +
		`FROM xtp_tour.facilities ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	f := Facility{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&f.ID, &f.Name, &f.Address, &f.GoogleMapsLink, &f.Website, &f.Country, &f.Location); err != nil {
		return nil, logerror(err)
	}
	return &f, nil
}

// FacilitiesByLocation retrieves a row from 'xtp_tour.facilities' as a [Facility].
//
// Generated from index 'idx_location'.
func FacilitiesByLocation(ctx context.Context, db DB, location Point) ([]*Facility, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, address, google_maps_link, website, country, location ` +
		`FROM xtp_tour.facilities ` +
		`WHERE location = ?`
	// run
	logf(sqlstr, location)
	rows, err := db.QueryContext(ctx, sqlstr, location)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Facility
	for rows.Next() {
		f := Facility{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&f.ID, &f.Name, &f.Address, &f.GoogleMapsLink, &f.Website, &f.Country, &f.Location); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &f)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
