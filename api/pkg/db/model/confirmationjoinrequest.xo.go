package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ConfirmationJoinRequest represents a row from 'xtp_tour.confirmation_join_requests'.
type ConfirmationJoinRequest struct {
	ConfirmationID string `json:"confirmation_id"` // confirmation_id
	JoinRequestID  string `json:"join_request_id"` // join_request_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ConfirmationJoinRequest] exists in the database.
func (cjr *ConfirmationJoinRequest) Exists() bool {
	return cjr._exists
}

// Deleted returns true when the [ConfirmationJoinRequest] has been marked for deletion
// from the database.
func (cjr *ConfirmationJoinRequest) Deleted() bool {
	return cjr._deleted
}

// Insert inserts the [ConfirmationJoinRequest] to the database.
func (cjr *ConfirmationJoinRequest) Insert(ctx context.Context, db DB) error {
	switch {
	case cjr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cjr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO xtp_tour.confirmation_join_requests (` +
		`confirmation_id, join_request_id` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, cjr.ConfirmationID, cjr.JoinRequestID)
	if _, err := db.ExecContext(ctx, sqlstr, cjr.ConfirmationID, cjr.JoinRequestID); err != nil {
		return logerror(err)
	}
	// set exists
	cjr._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [ConfirmationJoinRequest] from the database.
func (cjr *ConfirmationJoinRequest) Delete(ctx context.Context, db DB) error {
	switch {
	case !cjr._exists: // doesn't exist
		return nil
	case cjr._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM xtp_tour.confirmation_join_requests ` +
		`WHERE confirmation_id = ? AND join_request_id = ?`
	// run
	logf(sqlstr, cjr.ConfirmationID, cjr.JoinRequestID)
	if _, err := db.ExecContext(ctx, sqlstr, cjr.ConfirmationID, cjr.JoinRequestID); err != nil {
		return logerror(err)
	}
	// set deleted
	cjr._deleted = true
	return nil
}

// ConfirmationJoinRequestByConfirmationIDJoinRequestID retrieves a row from 'xtp_tour.confirmation_join_requests' as a [ConfirmationJoinRequest].
//
// Generated from index 'confirmation_join_requests_confirmation_id_join_request_id_pkey'.
func ConfirmationJoinRequestByConfirmationIDJoinRequestID(ctx context.Context, db DB, confirmationID, joinRequestID string) (*ConfirmationJoinRequest, error) {
	// query
	const sqlstr = `SELECT ` +
		`confirmation_id, join_request_id ` +
		`FROM xtp_tour.confirmation_join_requests ` +
		`WHERE confirmation_id = ? AND join_request_id = ?`
	// run
	logf(sqlstr, confirmationID, joinRequestID)
	cjr := ConfirmationJoinRequest{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, confirmationID, joinRequestID).Scan(&cjr.ConfirmationID, &cjr.JoinRequestID); err != nil {
		return nil, logerror(err)
	}
	return &cjr, nil
}

// ConfirmationJoinRequestsByJoinRequestID retrieves a row from 'xtp_tour.confirmation_join_requests' as a [ConfirmationJoinRequest].
//
// Generated from index 'join_request_id'.
func ConfirmationJoinRequestsByJoinRequestID(ctx context.Context, db DB, joinRequestID string) ([]*ConfirmationJoinRequest, error) {
	// query
	const sqlstr = `SELECT ` +
		`confirmation_id, join_request_id ` +
		`FROM xtp_tour.confirmation_join_requests ` +
		`WHERE join_request_id = ?`
	// run
	logf(sqlstr, joinRequestID)
	rows, err := db.QueryContext(ctx, sqlstr, joinRequestID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ConfirmationJoinRequest
	for rows.Next() {
		cjr := ConfirmationJoinRequest{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cjr.ConfirmationID, &cjr.JoinRequestID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cjr)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Confirmation returns the Confirmation associated with the [ConfirmationJoinRequest]'s (ConfirmationID).
//
// Generated from foreign key 'confirmation_join_requests_ibfk_1'.
func (cjr *ConfirmationJoinRequest) Confirmation(ctx context.Context, db DB) (*Confirmation, error) {
	return ConfirmationByID(ctx, db, cjr.ConfirmationID)
}

// JoinRequest returns the JoinRequest associated with the [ConfirmationJoinRequest]'s (JoinRequestID).
//
// Generated from foreign key 'confirmation_join_requests_ibfk_2'.
func (cjr *ConfirmationJoinRequest) JoinRequest(ctx context.Context, db DB) (*JoinRequest, error) {
	return JoinRequestByID(ctx, db, cjr.JoinRequestID)
}
