/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of events that belong to the user */
        get: operations["listEventsHandler-fm"];
        put?: never;
        /** Create an event */
        post: operations["createEventHandler-fm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of public events */
        get: operations["listPublicEventsHandler-fm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{eventId}/confirmation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm event */
        post: operations["confirmEvent-fm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{eventId}/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Join an event */
        post: operations["joinEventHandler-fm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event by id */
        get: operations["getEventHandler-fm"];
        put?: never;
        post?: never;
        /** Delete event by id */
        delete: operations["deleteEventHandler-fm"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of locations */
        get: operations["listLocationsHandler-fm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["healthHandler-fm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiConfirmation: {
            /** Format: date */
            createdAt?: string;
            /** Format: date */
            datetime?: string;
            /** Format: int32 */
            duration?: number;
            eventId?: string;
            location?: string;
        };
        ApiCoordinates: {
            /** Format: double */
            latitude?: number;
            /** Format: double */
            longitude?: number;
        };
        ApiCreateEventResponse: {
            event?: components["schemas"]["ApiEvent"];
        };
        ApiEvent: {
            confirmation?: components["schemas"]["ApiConfirmation"];
            /** Format: date */
            createdAt?: string;
            description?: string;
            /** @enum {string} */
            eventType: "MATCH" | "TRAINING";
            /** Format: int32 */
            expectedPlayers: number;
            id?: string;
            joinRequests?: components["schemas"]["ApiJoinRequest"][];
            locations: string[];
            /** Format: int32 */
            sessionDuration: number;
            /** @enum {string} */
            skillLevel: "ANY" | "BEGINNER" | "INTERMEDIATE" | "ADVANCED";
            /** @enum {string} */
            status?: "OPEN" | "ACCEPTED" | "CONFIRMED" | "CANCELLED" | "RESERVATION_FAILED" | "COMPLETED";
            timeSlots: string[];
            userId?: string;
            /** @enum {string} */
            visibility: "PUBLIC" | "PRIVATE";
        };
        ApiEventConfirmationResponse: {
            confirmation?: components["schemas"]["ApiConfirmation"];
        };
        ApiEventData: {
            description?: string;
            /** @enum {string} */
            eventType: "MATCH" | "TRAINING";
            /** Format: int32 */
            expectedPlayers: number;
            id?: string;
            locations: string[];
            /** Format: int32 */
            sessionDuration: number;
            /** @enum {string} */
            skillLevel: "ANY" | "BEGINNER" | "INTERMEDIATE" | "ADVANCED";
            timeSlots: string[];
            userId?: string;
            /** @enum {string} */
            visibility: "PUBLIC" | "PRIVATE";
        };
        ApiGetEventResponse: {
            event?: components["schemas"]["ApiEvent"];
        };
        ApiHealthResponse: {
            message?: string;
            service?: string;
            status?: string;
        };
        ApiJoinRequest: {
            comment?: string;
            /** Format: date */
            createdAt?: string;
            id?: string;
            locations: string[];
            /** @enum {string} */
            status?: "WAITING" | "ACCEPTED" | "REJECTED" | "CANCELLED" | "RESERVATION_FAILED";
            timeSlots: string[];
            userId?: string;
        };
        ApiJoinRequestData: {
            comment?: string;
            id?: string;
            locations: string[];
            timeSlots: string[];
        };
        ApiJoinRequestResponse: {
            joinRequest?: components["schemas"]["ApiJoinRequest"];
        };
        ApiListEventsResponse: {
            events?: components["schemas"]["ApiEvent"][];
            /** Format: int32 */
            total?: number;
        };
        ApiListLocationsResponse: {
            locations?: components["schemas"]["ApiLocation"][];
        };
        ApiListPublicEventsResponse: {
            events?: components["schemas"]["ApiEvent"][];
            /** Format: int32 */
            total?: number;
        };
        ApiLocation: {
            address?: string;
            coordinates?: components["schemas"]["ApiCoordinates"];
            id?: string;
            name?: string;
        };
        "ConfirmEvent-FmInput": {
            /** Format: date */
            datetime: string;
            /** Format: int32 */
            duration: number;
            joinRequestsIds: string[];
            locationId: string;
        };
        "CreateEventHandler-FmInput": {
            event: components["schemas"]["ApiEventData"];
        };
        "JoinEventHandler-FmInput": {
            joinRequest: components["schemas"]["ApiJoinRequestData"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "listEventsHandler-fm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiListEventsResponse"];
                };
            };
        };
    };
    "createEventHandler-fm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateEventHandler-FmInput"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiCreateEventResponse"];
                };
            };
        };
    };
    "listPublicEventsHandler-fm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiListPublicEventsResponse"];
                };
            };
        };
    };
    "confirmEvent-fm": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConfirmEvent-FmInput"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiEventConfirmationResponse"];
                };
            };
        };
    };
    "joinEventHandler-fm": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JoinEventHandler-FmInput"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiJoinRequestResponse"];
                };
            };
        };
    };
    "getEventHandler-fm": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiGetEventResponse"];
                };
            };
        };
    };
    "deleteEventHandler-fm": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "listLocationsHandler-fm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiListLocationsResponse"];
                };
            };
        };
    };
    "healthHandler-fm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiHealthResponse"];
                };
            };
        };
    };
}
